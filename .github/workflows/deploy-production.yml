name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Install
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build
        run: API_URL=https://api.ricksm.it/stable npm run build

      - name: Load AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy App Stack
        id: deploy-cf
        if: success()
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ricksm-it-production
          capabilities: CAPABILITY_IAM
          template: template.yml
          no-fail-on-empty-changeset: '1'
          parameter-overrides: RecordSetDomainName=ricksm.it, RecordSetDomainNameApi=api.ricksm.it, HostedZoneID=Z1U947S9YD3XG4, CertificateArn=${{ secrets.AWS_CERTIFICATE_ARN_PROD }}, DeploymentType=production

      - name: Save outputs
        id: cf-outputs
        if: success()
        run: |
          outputs=$(aws cloudformation describe-stacks --stack-name ${{steps.deploy-cf.outputs.stack-id}} | jq -cr '.Stacks[0].Outputs')
          if [[ $outputs != null ]] ; then
              echo "$outputs" | jq -c '.[]' | while read -r line; do
                  key=$(echo "$line" | jq -r '.OutputKey')
                  value=$(echo "$line" | jq -r '.OutputValue')
                  echo "::set-output name=$key::$value"
              done
          fi

      - name: SAM buld and package
        run: sam build -t lambdas/api/template.yml && sam package -t .aws-sam/build/template.yaml --s3-bucket ${{steps.cf-outputs.outputs.LambdaBucket}} --output-template-file .aws-sam/build/packaged.yaml

      - name: sam deploy
        run: |
          sam deploy \
            --template-file .aws-sam/build/packaged.yaml \
            --stack-name website-api-prod \
            --no-fail-on-empty-changeset \
            --parameter-overrides ParameterKey=ApiDomain,ParameterValue=api.ricksm.it ParameterKey=GithubToken,ParameterValue=${{ secrets.PERSONAL_GITHUB_TOKEN }} --capabilities CAPABILITY_IAM

      - name: Strip file names
        run: find build/ -type f ! -iname 'index.html' -iname '*.html' -print0 | while read -d $'\0' f; do mv "$f" "${f%.html}"; done

      - name: Sync With S3
        if: success()
        run: |
          aws s3 sync build/ s3://${{steps.cf-outputs.outputs.DeployBucket}} --content-type text/html --exclude "assets/**" --delete &&
          aws s3 sync build/assets s3://${{steps.cf-outputs.outputs.DeployBucket}}/assets

      - name: Invalidate cache
        if: success()
        run: aws cloudfront create-invalidation --distribution-id ${{steps.cf-outputs.outputs.Distribution}} --paths /
