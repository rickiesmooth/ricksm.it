AWSTemplateFormatVersion: '2010-09-09'
Description: SAM Template for fetch function

# this template should set up infra
# template.yml should run first, because here we need bucketname as param
# then cloudfront distribution is made for deployBucket
# DistributionAlias will use RecordSetDomainName

# this template has a lambda that routes request to {bucketname}.ricksmi.t
# distributionAlias also has wildcard to route all traffic to distribution

# ricksm-it-3-deploybucket-v3hou4o3wwq.dev-env.net
# origin.s3.domainName = request.subdomains;

# for prod distribution cname ricksm.it (template.preview.yml)
# ricksm.it

# @TODO https://aws.amazon.com/blogs/networking-and-content-delivery/dynamically-route-viewer-requests-to-any-origin-using-lambdaedge/

Parameters:
  RecordSetDomainName:
    Type: String
    Description: 'Domain name traffic should be routed to'
  CertificateArn:
    Type: String
  HostedZoneID:
    Type: String
    Description: 'Hosted zone ID domain is part of'
  DeploymentType:
    AllowedValues:
      - 'development'
      - 'production'
    Default: 'development'
    Description: 'Use development or production version'
    Type: String
Conditions:
  UseLambdaTrigger: !Equals
    - !Ref DeploymentType
    - 'development'
Resources:
  DeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
  Distribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt DeployBucket.DomainName
            Id: !Ref DeployBucket
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultRootObject: index.html
        LambdaFunctionAssociations:
          - EventType: origin-request
            LambdaFunctionARN: !Ref TheOriginRequestLambdaFunction
        Enabled: true
        Aliases:
          - !Ref RecordSetDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: 'sni-only'
        DefaultCacheBehavior:
          MinTTL: 86400
          MaxTTL: 31536000
          ForwardedValues:
            QueryString: true
          TargetOriginId: !Ref DeployBucket
          ViewerProtocolPolicy: 'redirect-to-https'
  DistributionAlias:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneID
      RecordSets:
        - Name: !Ref RecordSetDomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt Distribution.DomainName
  TheOriginRequestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: >
        Lambda function performing request URI rewriting.
      Code:
        # add process.env for deploy bucket
        # origin.s3.domainName = originB;
        # origin.s3.pathname = subdomain
        ZipFile: |
          const path = require('path');
          exports.handler = async (event) => {
            var request = event.Records[0].cf.request;
            console.log(request.origin.s3)
            // Rewrite clean URLs (adding index.html)
            if (!path.extname(request.uri)) {
              request.uri = request.uri.replace(/\/?$/, '\/index.html');
            }
            return request;
          };
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Role: !Sub ${TheOriginRequestLambdaFunctionExecutionRole.Arn}
  TheOriginRequestLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
Outputs:
  BucketName:
    Description: The BucketName ID
    Value: !Ref DeployBucket
